#!/bin/bash

na=${1}
ta=${2}
ta2=${3}

#-------------------------------------------------------------------------------------------------------------------------------

iteration_b8 () {

  v=${1}

  for e in ${v[@]}
      do
         n=${e}   
         na="gtfh${n}"
         ta1="js"
         ta2="css"
          . "/workspace/MirrorFashion/src/Slide/componentsSlide/gridTD/1/bash/b8" "${n}" "${na}" "${ta1}" "${ta2}" 
      done 

}

#-------------------------------------------------------------------------------------------------------------------------------

#Cria um diretório chamado f(funções) contendo dois arquivos js  
#e add um dado conteudo aos dois arquivos.
#Sendo que um arquivo vai conter as funções e o outro irá realizar
#realizar testes da mesma.
CriarDirFeArqs () {

na=${1}  
contF=${2}
contFTeste=${3}
dir=${4}

echo  "Entrando no dir ${dir} ... " ;
cd "${dir}" ;

echo "Criando a pasta f ... "
mkdir f ;

echo "Entrando na pasta f ... "
cd "${dir}/f" ;

echo "Criando o arquivo ${na}F.js e ${na}FTeste.js  ... "
touch "${na}F.js" "${na}FTeste.js" ;
ls -la ;

echo "Colocando o conteudo de funções no arquivo ${na}F.js e teste em  ${na}FTeste.js ... "
echo -e "${contF}" > ${na}F.js ;
echo -e "${contFTeste}" > ${na}FTeste.js ;

echo "Exibindo o conteudo do arquivo ${na}F.js e ${na}FTeste.js ... "
cat "${na}F.js" "${na}FTeste.js" ;

echo "Executando o arquivo ${na}FTeste.js ... "
node "${na}FTeste.js" ;

}

CriarDirFeArqs2 () {

dir="${PWD}";

CriarDir "f" "${dir}"
dir="${PWD}/f";

arq1="#a1 gtfh${1}F.js %a1";
arq2="#a2 gtfh${1}FTeste.js %a2"; 

cont1="#c1 
/*#Comentários*/
//Funções_teste gtf${1}
/*Comentários#*/

/*#Obj_Main*/  
const gtf${1}_funções = {
  /*#f1*/
  teste : () => {
      console.log('Esse é o objeto que contém métodos do hook gtf${1}')
  }
  /*f1#*/
}
/*Obj_Main#*/  

/*#Export*/
export {gtf${1}_funções}
/*Export#*/
 %c1";  

cont2="#c2 
/*#Comentários*/
//Funções_teste gtf${1}
/*Comentários#*/

/*#Obj_Main*/  
const gtf${1}_funções = {
  /*#f1*/
  teste : () => {
      console.log('Esse é o objeto que contém métodos do hook gtf${1}')
  }
  /*f1#*/
}
/*Obj_Main#*/  

/*Teste*/
gtf${1}_funções.teste() ;
 %c2";

a1="${cont1} ${arq1}" ; a2="${cont2} ${arq2}" ;
 
dropContG "${a1} ${a2}" "${dir}" "1 2" ;

}

CriarDirFeArqs3 () {

dir="${PWD}";

CriarDir "f" "${dir}"
dir="${dir}/f";

arq1="#gtfh${1}F.js";
arq2="gtfh${1}FTeste.js"; 

cont1="/*#Comentários*/
//Funções_teste gtf${1}
/*Comentários#*/

/*#Obj_Main*/  
const gtf${1}_funções = {
  /*#f1*/
  teste : () => {
      console.log('Esse é o objeto que contém métodos do hook gtf${1}')
  }
  /*f1#*/
}
/*Obj_Main#*/  

/*#Export*/
export {gtf${1}_funções}
/*Export#*/
";  

cont2="/*#Comentários*/
//Funções_teste gtf${1}
/*Comentários#*/

/*#Obj_Main*/  
const gtf${1}_funções = {
  /*#f1*/
  teste : () => {
      console.log('Esse é o objeto que contém métodos do hook gtf${1}')
  }
  /*f1#*/
}
/*Obj_Main#*/  

/*Teste*/
gtf${1}_funções.teste() ;
";
 
dropCont "${cont1}" "${arq1}" "${dir}" ;

}

#Cria um diretório chamado css contendo dois arquivos css  
#e add um dado conteudo aos dois arquivos. 
CriarDirCssArqs () {

na=${1}  #Nome padrão do arquivo
ta=${2}  #Tipo de arquivo
contCss=${3} #Conteudo arquivo
contCssA=${4} #Conteudo arquivo
dir=${5} #Diretório

CriarDir "${ta}" "${dir}"

echo "Entrando na pasta css ... "
dir="${dir}/${ta}"
cd "${dir}" ;

echo "Criando os arquivos ${na}.${ta}, ${na}A.${ta} e colocando seus respectivos conteudos  ... "
dropCont "${contCss}" "${na}.${ta}" "${dir}" ;
dropCont "${contCssA}" "${na}A.${ta}" "${dir}" ;
ls -la ;

}

CriaDirCssArqs2 () {
arq1="#a1 css.css %a1";
arq2="#a2 cssA.css %a2"; 

contCss="#c1 .css {} %c1";  a1="${contCss} ${arq1}" ;
contCssA="#c2 .cssA {} %c2"; a2="${contCssA} ${arq2}" ;

dir="$PWD" ;  
dropContG "${a1} ${a2}" "${dir}" "1 2" ;
}

CriarDirCompParqs () {

na=${1}  
contCP=${2}
contCFA=${3}
dir=${4}

CriarDir "${na}" "${dir}"
dropCont "${contCP}" "${na}.${ta} " "${dir}/${na}"
CriarDirG "css f" "${dir}/${na}"

}

#Exibe o sucessor de um dado numero natural
sucessor () {

n=${1};  
n2=$[1+${n}];

echo  -e "${n2}" ;

}

#Cria um arquivo e add um conteudo
dropCont () {

cont=${1};  
arq=${2};
dir=${3};

echo  "Entrando no dir ${dir} ... " ;
cd "${dir}" ;

echo "Colocando o conteudo dentro do arquivo ${arq} ... "
echo  -e "${cont}" > ${arq} ;

echo "Exibindo o conteudo do arquivo ${arq} ... "
cat ${arq} ;

#cont="voce esta neste dir /workspace/MirrorFashion/";  arq="dropContt.txt"; dir="/workspace/MirrorFashion/"; dropCont "${cont}" "${arq}" "${dir}";
#dropCont "${cont}" "${arq}" "${dir}"
}

#Cria vários arquivos e add seus respectivos conteudos
dropContG () {

c=${1};
dir=${2};
co=${3};

# i = Quantidade de arquivos que será criado com seus respectivos conteudos
for i in ${co[@]} 

  do 

      arquivo="$(ExibeElArrayString "${c}" "#a${i}" "%a${i}")" ;
      conteudo="$(ExibeElArrayString "${c}" "#c${i}" "%c${i}")" ; 
      dropCont "${conteudo}" "${arquivo}" "${dir}" ;

  done


#cont1="#c1 voce esta neste dir /workspace/MirrorFashion/ 1 %c1";  arq1='#a1 dropCont1.txt %a1'; a1="${cont1} ${arq1}"
#cont2="#c2 voce esta neste dir /workspace/MirrorFashion/ 2 %c2";  arq2='#a2 dropCont2.txt %a2'; a2="${cont2} ${arq2}"
#dir="/workspace/MirrorFashion/" ;  dropContG "${a1} ${a2}" "${dir}" "1 2" ;

}

#Cria um diretório em um determinado local
CriarDir () {

ndir=${1};  
dir=${2};

echo  "Entrando no dir ${dir} ... " ;
cd "${dir}" ;
echo "Criando a pasta ${na} ... "
mkdir "${ndir}" ;
echo "Criando a ${ndir} ... "
ls -la | grep "${ndir}" ; 

#ndir="CriarDirteste"; dir="/workspace/MirrorFashion/"; CriarDir "${ndir}" "${dir}";
#CriarDir "${ndir}" "${dir}";

}

#Cria vários diretórios em um determinado local
CriarDirG () {

ndirs=${1};  
dir=${2};

for e in ${ndirs[@]} 
  do 

      CriarDir "${e}" "${dir}" ;

  done

#ndir1="CriarDirteste1"; ndir2="CriarDirteste2" ; dir="/workspace/MirrorFashion/"; CriarDirG "'${ndir1} b' ${ndir2}" "${dir}";
#CriarDirG "${ndir1} ${ndir2}" "${dir}";
}

#Remove vários arquivos em um determinado local
rmg () {

no=${1};  
dir=${2};

for e in ${no[@]} 
  do 

      rm -rf "${e}"  ;

  done

#ndir1="CriarDirteste1"; ndir2="CriarDirteste2" ; dir="/workspace/MirrorFashion/"; rmg "${ndir1} ${ndir2}" "${dir}";
#rmg "${ndir1} ${ndir2}" "${dir}";
}

#Exibe um valor de um dado índice de um array qualquer
ia () {

a=${1};
i=0;
index=${2}
for e in ${a[@]} 
  do
      if [ ${i} -eq ${index} ] ; then
             echo "${e}" ;
      fi
      i=$[i+1];
  done

#a1="'a' 'c' 'd'" ; a2="'b' 'd'" ;
#v=$(ia "${a1}" "2") ; echo ${v}
}

juntastring () {

arraystring=${1}
s="";

for e in ${arraystring[@]} 

  do 

      s="${s} ${e}"

  done

echo "${s}" ;

#t=$(juntastring 'voce esta neste dir /workspace/MirrorFashion/ 1') ; echo "${t}"

}

ExibeElArrayString () {

a=${1}
ss=${2}
se=${3}

s=""

c=0

for e in ${a[@]} 

  do 

      if [ ${e} = ${ss} ] ; then

          c=1 ;
          continue ;

   elif  [ ${e} = ${se} ] ; then 

          c=0 ;
          break ;
          
      fi   ;


      if [ ${c} -eq 1 ] ; then

          s="${s} ${e}" ;

      fi   ;  

  done

  echo -e "${s}" ;

#t=$(ExibeElArrayString "${c}" '1y') ; echo "${t}"
#c1="#1 voce esta neste dir /workspace/MirrorFashion/ 1 %1 #2 dropCont1.txt %2"; 
#c2="voce esta neste dir /workspace/MirrorFashion/ 2";
#c="${c1} ${c2}" ;
#v2=$(ExibeElArrayString "${c}" "#2" "%2") ; v1=$(ExibeElArrayString "${c}" "#1" "%1")

}

#Analisa se dois elementos são iguais 
AnaliseEl() {

e1=${1} ;
e2=${2} ;

    if [ ${e1} = ${e2} ] ; then
          echo "verdadeiro" ;
    elif  [ ${e1} != ${e2} ] ; then
          echo "falso" ;
      fi   ;

}

